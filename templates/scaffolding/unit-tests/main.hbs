/**
 * {{capitalizedName}} {{functionSuffix}} - Unit Tests
 */

import { describe, it, expect, beforeEach } from "vitest";
import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { register{{capitalizedName}}{{functionSuffix}} } from "../../../src/{{entityTypePlural}}/{{name}}.js";

describe("{{name}} {{entityType}}", () => {
	let server: McpServer;

	beforeEach(() => {
		server = new McpServer({
			name: "test-server",
			version: "1.0.0",
		});
		register{{capitalizedName}}{{functionSuffix}}(server);
	});

	it("should register the {{entityType}}", () => {
		// TODO: Verify {{entityType}} is registered
		expect(server).toBeDefined();
	});

	{{#if isToolType}}
	it("should handle valid parameters", async () => {
		// TODO: Test with valid parameters
		// Example:
		// const result = await callTool(server, "{{name}}", { /* params */ });
		// expect(result.content[0].text).toContain("expected");
	});

	it("should validate parameters", async () => {
		// TODO: Test parameter validation
		// Example: Test with missing required params, invalid types, etc.
	});

	it("should handle errors gracefully", async () => {
		// TODO: Test error handling
	});{{/if}}{{#if isPromptType}}
	it("should handle valid arguments", async () => {
		// TODO: Test with valid arguments
		// Example:
		// const result = await getPrompt(server, "{{name}}", { /* args */ });
		// expect(result.messages[0].content.text).toContain("expected");
	});

	it("should validate arguments", async () => {
		// TODO: Test argument validation
	});

	it("should handle errors gracefully", async () => {
		// TODO: Test error handling
	});{{/if}}{{#if isResourceType}}
	it("should handle valid URIs", async () => {
		// TODO: Test with valid URIs
		// Example:
		// const result = await readResource(server, "resource://test-id");
		// expect(result.contents[0].text).toContain("expected");
	});

	it("should handle resource parameters", async () => {
		// TODO: Test URI parameter extraction
	});

	it("should handle errors gracefully", async () => {
		// TODO: Test error handling
	});{{/if}}
});
