/**
 * {{capitalizedName}} Prompt
 *
 * {{description}}
 */

import type { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { z } from "zod";

// TODO: Define your argument schema
// Example:
// const {{capitalizedName}}ArgsSchema = z.object({
//   language: z.string().optional().describe("Programming language"),
//   topic: z.string().describe("Topic to explain"),
// });

const {{capitalizedName}}ArgsSchema = z.object({
	// Add your arguments here
});

/**
 * Register {{name}} prompt with the MCP server
 */
export function register{{capitalizedName}}Prompt(server: McpServer): void {
	server.prompt(
		"{{name}}",
		"{{description}}",
		{{capitalizedName}}ArgsSchema.shape,
		async (args) => {
			// TODO: Implement your prompt logic here
			// You can access args like: args.language, args.topic, etc.

			// Example: Return a simple prompt
			const promptText = `You are a helpful assistant.

TODO: Replace this with your actual prompt template.

Example with args:
- Language: ${args.language || "any"}
- Topic: ${args.topic || "general"}
`;

			return {
				messages: [
					{
						role: "user",
						content: {
							type: "text",
							text: promptText,
						},
					},
				],
			};
		},
	);
}
