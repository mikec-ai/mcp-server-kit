/**
 * {{capitalizedName}} Tool
 *
 * {{description}}
 */

import type { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { z } from "zod";

// TODO: Define your parameter schema
// Example:
// const {{capitalizedName}}ParamsSchema = z.object({
//   message: z.string().describe("Your message"),
//   count: z.number().int().positive().optional().describe("Repeat count"),
// });

const {{capitalizedName}}ParamsSchema = z.object({
	// Add your parameters here
});

/**
 * Register {{name}} tool with the MCP server{{#if bindingContext.hasBindings}}
 *
 * @param server - MCP server instance
 * @param env - Environment bindings (optional, for accessing KV/D1/R2){{/if}}
 */
export function register{{capitalizedName}}Tool(server: McpServer{{#if bindingContext.hasBindings}}, env?: Env{{/if}}): void {
	server.tool(
		"{{name}}",
		"{{description}}",
		{{capitalizedName}}ParamsSchema.shape,
		async (params) => {
			// TODO: Implement your tool logic here
			// You can access params like: params.message, params.count, etc.
{{#if bindingContext.hasBindings}}

			// Available Cloudflare bindings: {{bindingContext.bindingSummary}}
			//
			// Access bindings using helper classes:
{{#each bindingContext.bindingExamples}}
			// {{this.type}} binding: {{this.bindingName}}
			// {{this.importStatement}}
			// {{this.usageExample}}
			//
{{/each}}{{/if}}

			// Example: Return a simple response
			return {
				content: [
					{
						type: "text",
						text: JSON.stringify(
							{
								result: "not implemented",
								params,
							},
							null,
							2,
						),
					},
				],
			};

			// Example: Handle errors with inline pattern
			// try {
			//   const result = await yourLogic();
			//   return {
			//     content: [{
			//       type: "text" as const,
			//       text: JSON.stringify(result, null, 2),
			//     }],
			//   };
			// } catch (error) {
			//   return {
			//     content: [{
			//       type: "text" as const,
			//       text: JSON.stringify({
			//         error: true,
			//         message: error instanceof Error ? error.message : String(error),
			//       }, null, 2),
			//     }],
			//     isError: true,
			//   };
			// }
		},
	);
}
